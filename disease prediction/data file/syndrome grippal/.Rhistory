if (!is.numeric(x) | !is.numeric(y)) {
warning(stop('Error: argument is not numeric'))
}
(1:x) %o% (1:y)
}
my_mult_table('','')
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
}
(1:x) %o% (1:y)
}
my_mult_table('','')
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
noreturn <- '1'
}
(1:x) %o% (1:y)
}
my_mult_table('','')
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
return(noreturn <- '1')
}
(1:x) %o% (1:y)
}
my_mult_table('','')
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
x<-as.numeric(x)
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
return(noreturn <- '1')
}
else if ((x<2 | x>20) | (y<2 | y>20)) {
warning('Error: please choose a value between 2-20')
}
(1:x) %o% (1:y)
}
my_mult_table('2',4)
my_mult_table('E',4)
as.numeric('3')
as.numeric('E')
is.numeric(NA)
seq()
seq
methods(seq)
seq.Date
seq('1',2)
seq('1',3)
seq('E',3)
1:'2'
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
if (missing(x)) stop('argument "x" is missing, with no default')
if (missing(y)) stop('argument "x" is missing, with no default')
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
return(noreturn <- '1')
}
else if ((x<2 | x>20) | (y<2 | y>20)) {
warning('Error: please choose a value between 2-20')
}
warning('function will convert supplied values to integer')
(1:x) %o% (1:y)
}
my_mult_table()
my_mult_table(10, 20)
my_mult_table(-8, 21)
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
if (missing(x)) stop('argument "x" is missing, with no default')
if (missing(y)) stop('argument "x" is missing, with no default')
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
return(noreturn <- '1')
}
else if ((x<2 | x>20) | (y<2 | y>20)) {
warning('Error: please choose a value between 2-20')
return(noreturn <- '1')
}
warning('function will convert supplied values to integer')
(1:x) %o% (1:y)
}
my_mult_table(-8, 21)
my_mult_table(TRUE, "BLUE")
my_mult_table(-8, 21)
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
if (missing(x)) stop('argument "x" is missing, with no default')
if (missing(y)) stop('argument "x" is missing, with no default')
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
return(noreturn <- '1')
}
else if ((x<2 | x>20) | (y<2 | y>20)) {
warning('Error: please choose a value between 2-20')
return(noreturn <- '1')
}
warning('function will convert supplied values to integer')
(1:x) %o% (1:y)
}
my_mult_table(-8, 21)
my_mult_table(TRUE, "BLUE")
my_mult_table(-8, 21)
my_mult_table(-8, 21)
my_mult_table(-8, 21)
# function: my_mult_table
# generate standard multiplication tables 2-20
# clear the workspace
rm(list=ls())
my_mult_table <- function(x, y){
if (missing(x)) stop('argument "x" is missing, with no default')
if (missing(y)) stop('argument "x" is missing, with no default')
if (!is.numeric(x) | !is.numeric(y)) {
warning('Error: argument is not numeric')
noreturn <- 1
return(rm(noreturn))
}
else if ((x<2 | x>20) | (y<2 | y>20)) {
warning('Error: please choose a value between 2-20')
noreturn <- 1
return(rm(noreturn))
}
warning('function will convert supplied values to integer')
(1:x) %o% (1:y)
}
my_mult_table(TRUE, "BLUE")
my_mult_table(TRUE, "BLUE")
my_mult_table(TRUE, "BLUE")
my_mult_table(-8, 21)
my_mult_table(-8, 21)
my_max <- function(x){
x.max <- x[1]
## lines missing here
for (num in x) {
if (num > x.max) x.max <- num
}
return(x.max)
}
set.seed(18)
testv <- sample(1:1000,100)
summary(testv)
my_max(testv)
my_max(-testv)
my_max(letters)
my_max <- function(x){
##error checking
if(missing(x)) stop()
x.max <- x[1]
## lines missing here
for (num in x) {
if (num > x.max) x.max <- num
}
return(x.max)
}
my_max()
my_max <- function(x){
##error checking
if (missing(x)) stop('argument "x" is missing, with no default')
if (!is.numeric(x)) stop('need a numeric vector')
x.max <- x[1]
## lines missing here
for (num in x) {
if (num > x.max) x.max <- num
}
return(x.max)
}
my_max <- function(x){
##error checking
if (missing(x)) stop('argument "x" is missing, with no default')
if (!is.numeric(x) | !is.vector()) stop('need a numeric vector')
x.max <- x[1]
## lines missing here
for (num in x) {
if (num > x.max) x.max <- num
}
return(x.max)
}
need a numeric vector
my_max(letters)
my_max <- function(x){
##error checking
if (missing(x)) stop('argument "x" is missing, with no default')
if (!is.numeric(x) | !is.vector(x)) stop('need a numeric vector')
x.max <- x[1]
## lines missing here
for (num in x) {
if (num > x.max) x.max <- num
}
return(x.max)
}
my_max(letters)
my_max(rep(c(TRUE, FALSE), 50))
my_max(iris)
for (x in 1:10) {}
for (x in 1:10) {
print x
for (x in 1:10) {
print(x)
}
for (x in 1:10) {
x <- 10
print(x)
}
replicate(10, pgm_a)
replicate(10, pgm_a())
pgm_a <- function() {
for (x in 1:4) {
d <- sample(1:6, 1)
if (d==6) return(1)
}
return(0)
}
replicate(10, pgm_a())
replicate(10, pgm_a())
pgm_a <- function() {
for (x in 1:4) {
d <- sample(1:6, 1)
if (d==6) return(TRUE)
}
return(FALSE)
}
replicate(10, pgm_a())
replicate(10, pgm_a()) %>% table()
library(dplyr)
pgm_a <- function() {
for (x in 1:4) {
d <- sample(1:6, 1)
if (d==6) return(TRUE)
}
return(FALSE)
}
replicate(10, pgm_a())
replicate(10, pgm_a()) %>% table()
replicate(10, pgm_a()) %>% table() %>% prop.table()
replicate(10, pgm_a()) %>% prop.table()
replicate(10, pgm_a()) %>% table() %>% prop.table()
replicate(10, pgm_a()) %>% table() %>% prop.table()
replicate(1000, pgm_a()) %>% table() %>% prop.table()
replicate(10000, pgm_a()) %>% table() %>% prop.table()
replicate(100000, pgm_a()) %>% table() %>% prop.table()
replicate(100000, pgm_a()) %>% table() %>% prop.table()
replicate(100000, pgm_a()) %>% table() %>% prop.table()
replicate(100000, pgm_a()) %>% table() %>% prop.table()
pgm_b <- function() {
for (x in 1:24) {
a <- sample(1:6, 1)
b <- sample(1:6, 1)
if (a==6 & b==6) return(TRUE)
}
return(FALSE)
}
pgm_b()
pgm_b()
replicate(100000, pgm_a()) %>% table() %>% prop.table()
replicate(1000, pgm_a()) %>% table() %>% prop.table()
replicate(10000, pgm_a()) %>% table() %>% prop.table()
library(nycflights13)
library(tidyverse)
install.packages('tidyverse')
install.packages('nycflights13')
library(nycflights13)
library(tidyverse)
flights
names(flights)
filter(flights, arr_delay>=2)
filter(flights, arr_delay>=120)
str(filters)
str(flights)
filter(flights, dest=='IAH' | dest=='HOU')
filter(flights, dest %in% c('IAH', 'HOU'))
?betweeen
library(dplyr)
?betweeen
?between
filter(flights, is.na(dep_time)) %>% nrow()
summary(flights)
NA^0
NA*0
?num_range
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
flights %>% select(one_of(vars))
select(flights, contains("TIME"))
?min_rank
flights %>%
mutate(dep_time = (dep_time %/% 100) * 60 + (dep_time %% 100),
sched_dep_time = (sched_dep_time %/% 100) * 60 + (sched_dep_time %% 100),
arr_time = (arr_time %/% 100) * 60 + (arr_time %% 100),
sched_arr_time = (sched_arr_time %/% 100) * 60 + (sched_arr_time %% 100)) %>%
transmute((arr_time - dep_time) %% (60*24) - air_time)
flights %>%
mutate(dep_time = (dep_time %/% 100) * 60 + (dep_time %% 100),
sched_dep_time = (sched_dep_time %/% 100) * 60 + (sched_dep_time %% 100),
arr_time = (arr_time %/% 100) * 60 + (arr_time %% 100),
sched_arr_time = (sched_arr_time %/% 100) * 60 + (sched_arr_time %% 100)) %>%
transmute(near((sched_dep_time + dep_delay) %% (60*24), dep_time, tol=1))
?near
filter(flights, min_rank(desc(dep_delay))<=10)
in_rank(desc(dep_delay))<=10
min_rank(desc(dep_delay))
min_rank(desc(flights$dep_delay))
?min_rank
min_rank(desc(flights$dep_delay)) <= 10
filter(flights, min_rank(desc(dep_delay))<=10)
1:2 + 1:11
?tally
flights %>%
mutate(dep_date = lubridate::make_datetime(year, month, day)) %>%
group_by(dep_date) %>%
summarise(cancelled = sum(is.na(dep_delay)),
n = n(),
mean_dep_delay = mean(dep_delay,na.rm=TRUE),
mean_arr_delay = mean(arr_delay,na.rm=TRUE)) %>%
ggplot(aes(x= cancelled/n)) +
geom_point(aes(y=mean_dep_delay), colour='blue', alpha=0.5) +
geom_point(aes(y=mean_arr_delay), colour='red', alpha=0.5) +
ylab('mean delay (minutes)')
flights %>%
filter(arr_delay > 0) %>%
group_by(carrier) %>%
summarise(average_arr_delay = mean(arr_delay, na.rm=TRUE)) %>%
arrange(desc(average_arr_delay))
flights %>%
summarise(n_distinct(carrier),
n_distinct(origin),
n_distinct(dest))
?cumany
flights %>%
mutate(dep_date = lubridate::make_datetime(year, month, day)) %>%
group_by(tailnum) %>%
arrange(dep_date) %>%
filter(!cumany(arr_delay>60)) %>%
tally(sort = TRUE)
cumany(c(T,T,T,T,F))
cumany(c(T,T,T,T,F,F))
cumany(c(F,T,T,T,T,F,F))
?count
flights %>%
ggplot(aes(x=factor(hour), fill=arr_delay>5 | is.na(arr_delay))) + geom_bar()
flights %>%
mutate(new_sched_dep_time = lubridate::make_datetime(year, month, day, hour, minute)) %>%
group_by(origin) %>%
arrange(new_sched_dep_time) %>%
mutate(prev_flight_dep_delay = lag(dep_delay)) %>%
ggplot(aes(x=prev_flight_dep_delay, y= dep_delay)) + geom_point()
flights %>%
mutate(new_sched_dep_time = lubridate::make_datetime(year, month, day, hour, minute)) %>%
group_by(origin) %>%
arrange(new_sched_dep_time)
flights %>%
mutate(new_sched_dep_time = lubridate::make_datetime(year, month, day, hour, minute)) %>%
group_by(origin) %>%
arrange(new_sched_dep_time) %>% select(origin)
flights %>%
mutate(new_sched_dep_time = lubridate::make_datetime(year, month, day, hour, minute)) %>%
group_by(origin)  %>% select(origin)
flights %>%
mutate(new_sched_dep_time = lubridate::make_datetime(year, month, day, hour, minute)) %>%
group_by(origin) %>%
arrange(new_sched_dep_time) %>% select(new_sched_dep_time)
flights %>%
group_by(dest) %>%
filter(n_distinct(carrier)>=2) %>%
group_by(carrier) %>%
summarise(possible_transfers = n_distinct(dest)) %>%
arrange(desc(possible_transfers))
?group_by
?attach
search()
vars
attach(vars)
fish <- read.csv("http://www.stat.ucla.edu/~vlew/datasets/fish.csv", stringsAsFactors=FALSE)
set.seed(12345)
sample(fish, 49, replace = FALSE)
?sample
sample(1:nrow(fish), 49)
sample(1:nrow(fish), 49)
sample(1:nrow(fish), 49)
set.seed(12345)
sample(1:nrow(fish), 49)
set.seed(12345)
fish[sample(1:nrow(fish), 49)] %>% select(LNGTH) %>% median()
fish[sample(1:nrow(fish), 49),] %>% select(LNGTH) %>% median()
head(fish])
head(fish)
str(fish)
set.seed(12345)
ll <- fish[sample(1:nrow(fish), 49),] %>% select(LNGTH)
ll
median(ll)
median(ll$LNGTH)
ll %>% summarise(median(LNGTH))
?rnorm
rnorm(4)
environment()
?environment
primitive
components
attributes
formalArgs()
formal(
)
formals()
?attributes
?sd
?qnorm,
?pnorm,
dnorm?
?
)
)
?dnorm
?prod
prod(1:23)
prod(1:3)
prod(2:!)
prod(2:1)
prod(23:1)/(prod(21:1)*prod(2:1))
choose(23,2)
prod(1:23)/(prod(1:21)*prod(2))
23!/(21!*2!)
names(fish)
search()
attach(fish)
search()
?cumulative distribution
??cumulative distribution
??'cumulative distribution'
?qqnorm
pnorm
?pnorm
qnorm(2)
qnorm(1)
qnorm(0.1)
qnorm(0)
qnorm(0.99)
pnorm(0.99)
pnorm(1)
pnorm(2)
pnorm(1.96)
?attach
library(dplyr)
getwd)
getwd()
setwd(./Desktop/datareach)
setwd('./Desktop/datareach')
setwd('./Desktop/datareach/disease prediction')
setwd('../disease prediction')
setwd('./disease prediction')
setwd('./data wrangle for disease')
getwd(
)
ls()
dir()
library(readr)
X14_sg <- read_csv("14-sg.csv", col_names = FALSE)
View(X14_sg)
X15_sg <- read_csv("15-sg.csv", col_names = FALSE)
X15_sg <- read_csv("16-sg.csv", col_names = FALSE)
X15_sg <- read_csv("15-sg.csv", col_names = FALSE)
X16_sg <- read_csv("16-sg.csv", col_names = FALSE)
X17_sg <- read_csv("17-sg.csv", col_names = FALSE)
X16_sg
X16_sg[,200:]
X16_sg[,200:204]
X16_sg[:,200:204]
X16_sg[200:@04,]
X16_sg[200:204,]
X16_sg[195:204,]
X16_sg[190:204,]
View(X16_sg)
X16_sg <- X16_sg[1:189,]
X15_sg <- X15_sg[,3:ncol("X15_sg")]
X15_sg <- X15_sg[,3:ncol(X15_sg)]
View(X15_sg)
View(X16_sg)
X16_sg <- X16_sg[,3:ncol(X16_sg)]
View(X17_sg)
X17_sg <- X17_sg[,3:ncol(X17_sg)]
comb <- bind_cols
comb <- bind_cols(X14_sg, X15_sg)
comb <- bind_cols(comb, X16_sg)
comb <- bind_cols(comb, X17_sg)
View(comb)
write_csv(comb, './comb.csv', col_names = FALSE)
